<Page x:Class="Template10.Samples.ValidationSample.Views.MainPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:Behaviors="using:Template10.Behaviors"
      xmlns:Controls="using:Template10.Samples.ValidationSample.Controls"
      xmlns:Core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:Interactivity="using:Microsoft.Xaml.Interactivity"
      xmlns:controls="using:Template10.Controls"
      xmlns:converters="using:Template10.Converters"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:local="using:Template10.Samples.ValidationSample.Views"
      xmlns:m="using:Template10.Samples.ValidationSample.Models"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:validate="using:Template10.Controls.Validation"
      xmlns:vm="using:Template10.Samples.ValidationSample.ViewModels"
      xmlns:behaviors="using:Template10.Validation.Behaviors"
      mc:Ignorable="d">

    <Page.DataContext>
        <vm:MainPageViewModel x:Name="ViewModel" />
    </Page.DataContext>

    <controls:ModalDialog x:Name="modalDialog" RequestedTheme="Light">

        <controls:ModalDialog.ModalBackground>
            <SolidColorBrush Opacity=".90" Color="Black" />
        </controls:ModalDialog.ModalBackground>

        <controls:ModalDialog.ModalTransitions>
            <TransitionCollection>
                <ContentThemeTransition VerticalOffset="-200" />
            </TransitionCollection>
        </controls:ModalDialog.ModalTransitions>

        <controls:ModalDialog.ModalContent>

            <StackPanel HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Background="White"
                        BorderBrush="Purple"
                        BorderThickness="35"
                        CornerRadius="25"
                        DataContext="{Binding Selected}"
                        Padding="24,16">

                <StackPanel.Resources>
                    
                    <Style TargetType="validate:ControlWrapper">
                        <Setter Property="Margin" Value="0,4" />
                    </Style>
                    
                    <x:Double x:Key="FieldWidth">350</x:Double>

                    <Style TargetType="TextBox" x:Key="ErrorTextBoxStyle">
                        <Setter Property="Background" Value="Red" />
                        <Setter Property="Foreground" Value="White" />
                    </Style>

                    <Style TargetType="CheckBox" x:Key="ErrorCheckBoxStyle">
                        <Setter Property="Foreground" Value="Red" />
                    </Style>
                
                </StackPanel.Resources>

                <validate:ControlWrapper PropertyName="FirstName">
                    <TextBox Width="{StaticResource FieldWidth}"
                             Header="First Name"
                             Text="{Binding FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <!-- you don't have to use the ControlWrapper AND the behavior, this is just showing both -->
                        <Interactivity:Interaction.Behaviors>
                            <behaviors:ValidationBehavior PropertyName="FirstName">
                                <behaviors:ValidationBehavior.WhenValidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{x:Null}" />
                                </behaviors:ValidationBehavior.WhenValidActions>
                                <behaviors:ValidationBehavior.WhenInvalidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{StaticResource ErrorTextBoxStyle}" />
                                </behaviors:ValidationBehavior.WhenInvalidActions>
                            </behaviors:ValidationBehavior>
                        </Interactivity:Interaction.Behaviors>
                    </TextBox>
                </validate:ControlWrapper>

                <validate:ControlWrapper PropertyName="LastName">
                    <TextBox Width="{StaticResource FieldWidth}"
                             Header="Last Name"
                             Text="{Binding LastName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <!-- you don't have to use the ControlWrapper AND the behavior, this is just showing both -->
                        <Interactivity:Interaction.Behaviors>
                            <behaviors:ValidationBehavior PropertyName="LastName">
                                <behaviors:ValidationBehavior.WhenValidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{x:Null}" />
                                </behaviors:ValidationBehavior.WhenValidActions>
                                <behaviors:ValidationBehavior.WhenInvalidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{StaticResource ErrorTextBoxStyle}" />
                                </behaviors:ValidationBehavior.WhenInvalidActions>
                            </behaviors:ValidationBehavior>
                        </Interactivity:Interaction.Behaviors>
                    </TextBox>
                </validate:ControlWrapper>

                <validate:ControlWrapper PropertyName="Email">
                    <TextBox Width="{StaticResource FieldWidth}"
                             Header="Email"
                             Text="{Binding Email, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <!-- you don't have to use the ControlWrapper AND the behavior, this is just showing both -->
                        <Interactivity:Interaction.Behaviors>
                            <behaviors:ValidationBehavior PropertyName="Email">
                                <behaviors:ValidationBehavior.WhenValidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{x:Null}" />
                                </behaviors:ValidationBehavior.WhenValidActions>
                                <behaviors:ValidationBehavior.WhenInvalidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{StaticResource ErrorTextBoxStyle}" />
                                </behaviors:ValidationBehavior.WhenInvalidActions>
                            </behaviors:ValidationBehavior>
                        </Interactivity:Interaction.Behaviors>
                    </TextBox>
                </validate:ControlWrapper>

                <validate:ControlWrapper PropertyName="Birth">
                    <DatePicker Width="{StaticResource FieldWidth}"
                                Date="{Binding Birth, Mode=TwoWay}"
                                Header="Birthday">
                        <!-- you don't have to use the ControlWrapper AND the behavior, this is just showing both -->
                        <Interactivity:Interaction.Behaviors>
                            <behaviors:ValidationBehavior PropertyName="Birth">
                                <behaviors:ValidationBehavior.WhenValidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{x:Null}" />
                                </behaviors:ValidationBehavior.WhenValidActions>
                                <behaviors:ValidationBehavior.WhenInvalidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{StaticResource ErrorTextBoxStyle}" />
                                </behaviors:ValidationBehavior.WhenInvalidActions>
                            </behaviors:ValidationBehavior>
                        </Interactivity:Interaction.Behaviors>
                    </DatePicker>
                </validate:ControlWrapper>

                <validate:ControlWrapper PropertyName="IsAdmin">
                    <CheckBox Width="{StaticResource FieldWidth}"
                              Content="Administrator"
                              IsChecked="{Binding IsAdmin, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <!-- you don't have to use the ControlWrapper AND the behavior, this is just showing both -->
                        <Interactivity:Interaction.Behaviors>
                            <behaviors:ValidationBehavior PropertyName="IsAdmin">
                                <behaviors:ValidationBehavior.WhenValidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{x:Null}" />
                                </behaviors:ValidationBehavior.WhenValidActions>
                                <behaviors:ValidationBehavior.WhenInvalidActions>
                                    <Core:ChangePropertyAction PropertyName="Style" Value="{StaticResource ErrorCheckBoxStyle}" />
                                </behaviors:ValidationBehavior.WhenInvalidActions>
                            </behaviors:ValidationBehavior>
                        </Interactivity:Interaction.Behaviors>
                    </CheckBox>
                </validate:ControlWrapper>

                <StackPanel Margin="0,8,0,0" Orientation="Horizontal">

                    <Button BorderBrush="Blue"
                            BorderThickness="3"
                            Content="Save"
                            IsEnabled="{Binding IsValid}">
                        <Interactivity:Interaction.Behaviors>
                            <Core:EventTriggerBehavior EventName="Click">
                                <Behaviors:ConditionalAction LeftValue="{Binding IsValid}" Operator="IsTrue">
                                    <Core:CallMethodAction MethodName="MarkAsClean" TargetObject="{Binding}" />
                                    <Core:ChangePropertyAction PropertyName="SelectedItem"
                                                               TargetObject="{Binding ElementName=List}"
                                                               Value="{x:Null}" />
                                    <Core:ChangePropertyAction PropertyName="IsModal"
                                                               TargetObject="{Binding ElementName=modalDialog}"
                                                               Value="False" />
                                </Behaviors:ConditionalAction>
                            </Core:EventTriggerBehavior>
                        </Interactivity:Interaction.Behaviors>
                    </Button>

                    <Button Margin="8,0"
                            BorderBrush="DarkGreen"
                            BorderThickness="3"
                            Content="Cancel">
                        <Interactivity:Interaction.Behaviors>
                            <Core:EventTriggerBehavior EventName="Click">
                                <Core:CallMethodAction MethodName="Revert" TargetObject="{Binding}" />
                                <Core:ChangePropertyAction PropertyName="SelectedItem"
                                                           TargetObject="{Binding ElementName=List}"
                                                           Value="{x:Null}" />
                                <Core:ChangePropertyAction PropertyName="IsModal"
                                                           TargetObject="{Binding ElementName=modalDialog}"
                                                           Value="False" />
                            </Core:EventTriggerBehavior>
                        </Interactivity:Interaction.Behaviors>
                    </Button>

                    <Button BorderBrush="Red"
                            BorderThickness="3"
                            Click="{x:Bind ViewModel.DeleteSelectedUser}"
                            Content="Delete"
                            DataContext="{Binding DataContext, ElementName=List}">
                        <Interactivity:Interaction.Behaviors>
                            <Core:EventTriggerBehavior EventName="Click">
                                <Core:ChangePropertyAction PropertyName="IsModal"
                                                           TargetObject="{Binding ElementName=modalDialog}"
                                                           Value="False" />
                            </Core:EventTriggerBehavior>
                        </Interactivity:Interaction.Behaviors>
                    </Button>


                </StackPanel>
            </StackPanel>

        </controls:ModalDialog.ModalContent>

        <Grid Background="Black">

            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>

            <controls:PageHeader RequestedTheme="Dark" Text="Validation sample">
                <AppBarButton Click="{x:Bind ViewModel.CreateAndSelectUser}"
                              Icon="Add"
                              Label="Create" />
            </controls:PageHeader>

            <Viewbox Grid.Row="1" HorizontalAlignment="Center">
                <Grid>

                    <Controls:Lcars />

                    <ListView x:Name="List"
                              Grid.Row="1"
                              Width="725"
                              Margin="375,250,0,100"
                              HorizontalAlignment="Left"
                              ItemTemplate="{StaticResource UserListItemTemplate}"
                              ItemsSource="{x:Bind ViewModel.Users}"
                              ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                              ScrollViewer.HorizontalScrollMode="Disabled"
                              ScrollViewer.VerticalScrollBarVisibility="Auto"
                              ScrollViewer.VerticalScrollMode="Auto"
                              SelectedItem="{Binding Selected, Mode=TwoWay}" Height="420">

                        <ListView.ItemContainerStyle>
                            <Style TargetType="ListViewItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            </Style>
                        </ListView.ItemContainerStyle>

                        <ListView.ItemsPanel>
                            <ItemsPanelTemplate>
                                <ItemsWrapGrid ItemWidth="225" Orientation="Horizontal" />
                            </ItemsPanelTemplate>
                        </ListView.ItemsPanel>

                        <Interactivity:Interaction.Behaviors>
                            <Core:EventTriggerBehavior EventName="SelectionChanged">
                                <Behaviors:ConditionalAction LeftValue="{Binding SelectedItem, ElementName=List}" Operator="IsNotNull">
                                    <Core:ChangePropertyAction PropertyName="IsModal"
                                                               TargetObject="{Binding ElementName=modalDialog}"
                                                               Value="True" />
                                </Behaviors:ConditionalAction>
                            </Core:EventTriggerBehavior>
                        </Interactivity:Interaction.Behaviors>

                        <m:User xmlns:m="using:Template10.Samples.ValidationSample.Models"
                                FirstName="Jerry"
                                LastName="Mayweather" />
                        <m:User xmlns:m="using:Template10.Samples.ValidationSample.Models"
                                FirstName="Jerry"
                                LastName="Mayweather" />
                        <m:User xmlns:m="using:Template10.Samples.ValidationSample.Models"
                                FirstName="Jerry"
                                LastName="Mayweather" />
                        <m:User xmlns:m="using:Template10.Samples.ValidationSample.Models"
                                FirstName="Jerry"
                                LastName="Mayweather" />
                        <m:User xmlns:m="using:Template10.Samples.ValidationSample.Models"
                                FirstName="Jerry"
                                LastName="Mayweather" />
                        <m:User xmlns:m="using:Template10.Samples.ValidationSample.Models"
                                FirstName="Jerry"
                                LastName="Mayweather" />

                    </ListView>

                </Grid>
            </Viewbox>

        </Grid>

    </controls:ModalDialog>

</Page>

